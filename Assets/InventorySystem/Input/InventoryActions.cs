//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/InventorySystem/Input/InventoryActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InventorySystem
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/InventorySystem/Input/InventoryActions.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @InventoryActions: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @InventoryActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InventoryActions"",
    ""maps"": [
        {
            ""name"": ""HotbarActionMap"",
            ""id"": ""7da9d64d-dc55-4925-ab46-b8e1f4c308bc"",
            ""actions"": [
                {
                    ""name"": ""SelectSlot1"",
                    ""type"": ""Button"",
                    ""id"": ""01b84267-0f84-4045-90ed-192f2f99c2fe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectSlot2"",
                    ""type"": ""Button"",
                    ""id"": ""a0cdc755-13ee-4cef-88f2-ccf7abc748ca"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectSlot3"",
                    ""type"": ""Button"",
                    ""id"": ""7fb60a54-81a9-4b98-aedc-115405afbff1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectSlot4"",
                    ""type"": ""Button"",
                    ""id"": ""cc09175e-435c-4150-9838-20c579b20d45"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectSlot5"",
                    ""type"": ""Button"",
                    ""id"": ""6220b6b8-7ad8-4b33-82f3-c777f2abba7e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectSlot6"",
                    ""type"": ""Button"",
                    ""id"": ""58f7575c-0c94-4c49-931b-bf36896996a2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectSlot7"",
                    ""type"": ""Button"",
                    ""id"": ""f635d5ad-8415-4bb2-b12c-9ee9d7d2ca1d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectSlot8"",
                    ""type"": ""Button"",
                    ""id"": ""cf17218d-8c33-4100-8a33-95f48c8c53d1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InventoryClick"",
                    ""type"": ""Button"",
                    ""id"": ""b6788f13-c459-44de-8259-e2ba93bc0a4f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Split"",
                    ""type"": ""Button"",
                    ""id"": ""74cdcd4c-285a-4fc0-a376-e4a1e05611c0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c1d68ab5-92de-430d-b5b3-6296d64cddc1"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectSlot1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""274d192c-bb42-47af-a63c-4bfbadfeb2eb"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectSlot2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""068b53fc-1454-4d93-9a3c-09969bf03d4a"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectSlot3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f50c7ead-6110-4f2e-a5ba-a836f2141460"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectSlot4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acd33049-14c0-4357-bf05-cf4fa27b2e54"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectSlot5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""542efcb2-e319-4dd4-a509-4fefc629114e"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectSlot6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6557837-056f-4061-a73e-e25b5e154bff"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectSlot7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67450aa5-fcde-4d93-92cb-6b355ed31561"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectSlot8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f79f4d9d-fb4f-4e3d-bf69-5e3c1fb73642"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44bbdf67-6560-4622-ad10-a26d8769d6b8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Split"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // HotbarActionMap
            m_HotbarActionMap = asset.FindActionMap("HotbarActionMap", throwIfNotFound: true);
            m_HotbarActionMap_SelectSlot1 = m_HotbarActionMap.FindAction("SelectSlot1", throwIfNotFound: true);
            m_HotbarActionMap_SelectSlot2 = m_HotbarActionMap.FindAction("SelectSlot2", throwIfNotFound: true);
            m_HotbarActionMap_SelectSlot3 = m_HotbarActionMap.FindAction("SelectSlot3", throwIfNotFound: true);
            m_HotbarActionMap_SelectSlot4 = m_HotbarActionMap.FindAction("SelectSlot4", throwIfNotFound: true);
            m_HotbarActionMap_SelectSlot5 = m_HotbarActionMap.FindAction("SelectSlot5", throwIfNotFound: true);
            m_HotbarActionMap_SelectSlot6 = m_HotbarActionMap.FindAction("SelectSlot6", throwIfNotFound: true);
            m_HotbarActionMap_SelectSlot7 = m_HotbarActionMap.FindAction("SelectSlot7", throwIfNotFound: true);
            m_HotbarActionMap_SelectSlot8 = m_HotbarActionMap.FindAction("SelectSlot8", throwIfNotFound: true);
            m_HotbarActionMap_InventoryClick = m_HotbarActionMap.FindAction("InventoryClick", throwIfNotFound: true);
            m_HotbarActionMap_Split = m_HotbarActionMap.FindAction("Split", throwIfNotFound: true);
        }

        ~@InventoryActions()
        {
            UnityEngine.Debug.Assert(!m_HotbarActionMap.enabled, "This will cause a leak and performance issues, InventoryActions.HotbarActionMap.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // HotbarActionMap
        private readonly InputActionMap m_HotbarActionMap;
        private List<IHotbarActionMapActions> m_HotbarActionMapActionsCallbackInterfaces = new List<IHotbarActionMapActions>();
        private readonly InputAction m_HotbarActionMap_SelectSlot1;
        private readonly InputAction m_HotbarActionMap_SelectSlot2;
        private readonly InputAction m_HotbarActionMap_SelectSlot3;
        private readonly InputAction m_HotbarActionMap_SelectSlot4;
        private readonly InputAction m_HotbarActionMap_SelectSlot5;
        private readonly InputAction m_HotbarActionMap_SelectSlot6;
        private readonly InputAction m_HotbarActionMap_SelectSlot7;
        private readonly InputAction m_HotbarActionMap_SelectSlot8;
        private readonly InputAction m_HotbarActionMap_InventoryClick;
        private readonly InputAction m_HotbarActionMap_Split;
        /// <summary>
        /// Provides access to input actions defined in input action map "HotbarActionMap".
        /// </summary>
        public struct HotbarActionMapActions
        {
            private @InventoryActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public HotbarActionMapActions(@InventoryActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "HotbarActionMap/SelectSlot1".
            /// </summary>
            public InputAction @SelectSlot1 => m_Wrapper.m_HotbarActionMap_SelectSlot1;
            /// <summary>
            /// Provides access to the underlying input action "HotbarActionMap/SelectSlot2".
            /// </summary>
            public InputAction @SelectSlot2 => m_Wrapper.m_HotbarActionMap_SelectSlot2;
            /// <summary>
            /// Provides access to the underlying input action "HotbarActionMap/SelectSlot3".
            /// </summary>
            public InputAction @SelectSlot3 => m_Wrapper.m_HotbarActionMap_SelectSlot3;
            /// <summary>
            /// Provides access to the underlying input action "HotbarActionMap/SelectSlot4".
            /// </summary>
            public InputAction @SelectSlot4 => m_Wrapper.m_HotbarActionMap_SelectSlot4;
            /// <summary>
            /// Provides access to the underlying input action "HotbarActionMap/SelectSlot5".
            /// </summary>
            public InputAction @SelectSlot5 => m_Wrapper.m_HotbarActionMap_SelectSlot5;
            /// <summary>
            /// Provides access to the underlying input action "HotbarActionMap/SelectSlot6".
            /// </summary>
            public InputAction @SelectSlot6 => m_Wrapper.m_HotbarActionMap_SelectSlot6;
            /// <summary>
            /// Provides access to the underlying input action "HotbarActionMap/SelectSlot7".
            /// </summary>
            public InputAction @SelectSlot7 => m_Wrapper.m_HotbarActionMap_SelectSlot7;
            /// <summary>
            /// Provides access to the underlying input action "HotbarActionMap/SelectSlot8".
            /// </summary>
            public InputAction @SelectSlot8 => m_Wrapper.m_HotbarActionMap_SelectSlot8;
            /// <summary>
            /// Provides access to the underlying input action "HotbarActionMap/InventoryClick".
            /// </summary>
            public InputAction @InventoryClick => m_Wrapper.m_HotbarActionMap_InventoryClick;
            /// <summary>
            /// Provides access to the underlying input action "HotbarActionMap/Split".
            /// </summary>
            public InputAction @Split => m_Wrapper.m_HotbarActionMap_Split;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_HotbarActionMap; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="HotbarActionMapActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(HotbarActionMapActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="HotbarActionMapActions" />
            public void AddCallbacks(IHotbarActionMapActions instance)
            {
                if (instance == null || m_Wrapper.m_HotbarActionMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_HotbarActionMapActionsCallbackInterfaces.Add(instance);
                @SelectSlot1.started += instance.OnSelectSlot1;
                @SelectSlot1.performed += instance.OnSelectSlot1;
                @SelectSlot1.canceled += instance.OnSelectSlot1;
                @SelectSlot2.started += instance.OnSelectSlot2;
                @SelectSlot2.performed += instance.OnSelectSlot2;
                @SelectSlot2.canceled += instance.OnSelectSlot2;
                @SelectSlot3.started += instance.OnSelectSlot3;
                @SelectSlot3.performed += instance.OnSelectSlot3;
                @SelectSlot3.canceled += instance.OnSelectSlot3;
                @SelectSlot4.started += instance.OnSelectSlot4;
                @SelectSlot4.performed += instance.OnSelectSlot4;
                @SelectSlot4.canceled += instance.OnSelectSlot4;
                @SelectSlot5.started += instance.OnSelectSlot5;
                @SelectSlot5.performed += instance.OnSelectSlot5;
                @SelectSlot5.canceled += instance.OnSelectSlot5;
                @SelectSlot6.started += instance.OnSelectSlot6;
                @SelectSlot6.performed += instance.OnSelectSlot6;
                @SelectSlot6.canceled += instance.OnSelectSlot6;
                @SelectSlot7.started += instance.OnSelectSlot7;
                @SelectSlot7.performed += instance.OnSelectSlot7;
                @SelectSlot7.canceled += instance.OnSelectSlot7;
                @SelectSlot8.started += instance.OnSelectSlot8;
                @SelectSlot8.performed += instance.OnSelectSlot8;
                @SelectSlot8.canceled += instance.OnSelectSlot8;
                @InventoryClick.started += instance.OnInventoryClick;
                @InventoryClick.performed += instance.OnInventoryClick;
                @InventoryClick.canceled += instance.OnInventoryClick;
                @Split.started += instance.OnSplit;
                @Split.performed += instance.OnSplit;
                @Split.canceled += instance.OnSplit;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="HotbarActionMapActions" />
            private void UnregisterCallbacks(IHotbarActionMapActions instance)
            {
                @SelectSlot1.started -= instance.OnSelectSlot1;
                @SelectSlot1.performed -= instance.OnSelectSlot1;
                @SelectSlot1.canceled -= instance.OnSelectSlot1;
                @SelectSlot2.started -= instance.OnSelectSlot2;
                @SelectSlot2.performed -= instance.OnSelectSlot2;
                @SelectSlot2.canceled -= instance.OnSelectSlot2;
                @SelectSlot3.started -= instance.OnSelectSlot3;
                @SelectSlot3.performed -= instance.OnSelectSlot3;
                @SelectSlot3.canceled -= instance.OnSelectSlot3;
                @SelectSlot4.started -= instance.OnSelectSlot4;
                @SelectSlot4.performed -= instance.OnSelectSlot4;
                @SelectSlot4.canceled -= instance.OnSelectSlot4;
                @SelectSlot5.started -= instance.OnSelectSlot5;
                @SelectSlot5.performed -= instance.OnSelectSlot5;
                @SelectSlot5.canceled -= instance.OnSelectSlot5;
                @SelectSlot6.started -= instance.OnSelectSlot6;
                @SelectSlot6.performed -= instance.OnSelectSlot6;
                @SelectSlot6.canceled -= instance.OnSelectSlot6;
                @SelectSlot7.started -= instance.OnSelectSlot7;
                @SelectSlot7.performed -= instance.OnSelectSlot7;
                @SelectSlot7.canceled -= instance.OnSelectSlot7;
                @SelectSlot8.started -= instance.OnSelectSlot8;
                @SelectSlot8.performed -= instance.OnSelectSlot8;
                @SelectSlot8.canceled -= instance.OnSelectSlot8;
                @InventoryClick.started -= instance.OnInventoryClick;
                @InventoryClick.performed -= instance.OnInventoryClick;
                @InventoryClick.canceled -= instance.OnInventoryClick;
                @Split.started -= instance.OnSplit;
                @Split.performed -= instance.OnSplit;
                @Split.canceled -= instance.OnSplit;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="HotbarActionMapActions.UnregisterCallbacks(IHotbarActionMapActions)" />.
            /// </summary>
            /// <seealso cref="HotbarActionMapActions.UnregisterCallbacks(IHotbarActionMapActions)" />
            public void RemoveCallbacks(IHotbarActionMapActions instance)
            {
                if (m_Wrapper.m_HotbarActionMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="HotbarActionMapActions.AddCallbacks(IHotbarActionMapActions)" />
            /// <seealso cref="HotbarActionMapActions.RemoveCallbacks(IHotbarActionMapActions)" />
            /// <seealso cref="HotbarActionMapActions.UnregisterCallbacks(IHotbarActionMapActions)" />
            public void SetCallbacks(IHotbarActionMapActions instance)
            {
                foreach (var item in m_Wrapper.m_HotbarActionMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_HotbarActionMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="HotbarActionMapActions" /> instance referencing this action map.
        /// </summary>
        public HotbarActionMapActions @HotbarActionMap => new HotbarActionMapActions(this);
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "HotbarActionMap" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="HotbarActionMapActions.AddCallbacks(IHotbarActionMapActions)" />
        /// <seealso cref="HotbarActionMapActions.RemoveCallbacks(IHotbarActionMapActions)" />
        public interface IHotbarActionMapActions
        {
            /// <summary>
            /// Method invoked when associated input action "SelectSlot1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSelectSlot1(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "SelectSlot2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSelectSlot2(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "SelectSlot3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSelectSlot3(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "SelectSlot4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSelectSlot4(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "SelectSlot5" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSelectSlot5(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "SelectSlot6" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSelectSlot6(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "SelectSlot7" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSelectSlot7(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "SelectSlot8" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSelectSlot8(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "InventoryClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnInventoryClick(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Split" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSplit(InputAction.CallbackContext context);
        }
    }
}
